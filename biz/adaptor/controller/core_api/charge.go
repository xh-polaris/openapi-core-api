// Code generated by hertz generator.

package core_api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/openapi-core-api/biz/application/dto/openapi/core_api"
)

// CreateBaseInterface .
// @router /base/create [POST]
func CreateBaseInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateBaseInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBaseInterface .
// @router /base/update [POST]
func UpdateBaseInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateBaseInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// DeleteBaseInterface .
// @router /base/delete [GET]
func DeleteBaseInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteBaseInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// GetBaseInterfaces .
// @router /base/get [GET]
func GetBaseInterfaces(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetBaseInterfacesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetBaseInterfacesResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateFullInterface .
// @router /full/create [POST]
func CreateFullInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateFullInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// UpdateFullInterface .
// @router /full/update [POST]
func UpdateFullInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateFullInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMargin .
// @router /full/margin [POST]
func UpdateMargin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateMarginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// DeleteFullInterface .
// @router /full/delete [GET]
func DeleteFullInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteFullInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// GetFullInterfaces .
// @router /full/get [GET]
func GetFullInterfaces(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetFullInterfacesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetFullInterfacesResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateGradient .
// @router /gradient/create [POST]
func CreateGradient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateGradientReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// UpdateGradient .
// @router /gradient/update [POST]
func UpdateGradient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateGradientReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.Response)

	c.JSON(consts.StatusOK, resp)
}

// GetGradient .
// @router /gradient/get [GET]
func GetGradient(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetGradientReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetGradientResp)

	c.JSON(consts.StatusOK, resp)
}
