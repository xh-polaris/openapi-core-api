// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/xh-polaris/openapi-core-api/biz/adaptor"
	"github.com/xh-polaris/openapi-core-api/provider"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/openapi-core-api/biz/application/dto/openapi/core_api"
)

// GenerateKey .
// @router /key/generate [POST]
func GenerateKey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GenerateKeyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.GenerateKey(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetKeys .
// @router /key/get [GET]
func GetKeys(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetKeysReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.GetKeys(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateKey .
// @router /key/update [POST]
func UpdateKey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateKeyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.UpdateKey(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// RefreshKey .
// @router /key/refresh [GET]
func RefreshKey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.RefreshKeyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.RefreshKey(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateHosts .
// @router /key/hosts [POST]
func UpdateHosts(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateHostReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.UpdateHosts(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// DeleteKey .
// @router /key/delete [GET]
func DeleteKey(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteKeyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.KeyService.DeleteKey(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
