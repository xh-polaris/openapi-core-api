// Code generated by hertz generator.

package core_api

import (
	"bytes"
	"context"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xh-polaris/openapi-core-api/biz/adaptor"
	core_api "github.com/xh-polaris/openapi-core-api/biz/application/dto/openapi/core_api"
	"github.com/xh-polaris/openapi-core-api/provider"
)

// CallInterface .
// @router /call/ [POST]
func CallInterface(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CallInterfaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.CallService.CallInterface(ctx, &req, string(c.GetHeader("signature")), getSignature(c), getHostOrIP(c))
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

func getHostOrIP(c *app.RequestContext) string {
	// 暂时先从origin中获取host，与key的host进行校验
	// 之后可以根据需求转换成真实ip校验
	return string(c.GetHeader("origin"))
}

func getSignature(c *app.RequestContext) string {
	data := make([]byte, 0)

	headers := c.Request.Header.Header()
	headerLines := bytes.Split(headers, []byte("\r\n"))
	for cnt, line := range headerLines {
		// 忽略大小写检查是否是 Signature 字段
		if !bytes.Contains(line, []byte("Signature")) {
			data = append(data, line...)
			if cnt != len(headerLines)-1 {
				data = append(data, []byte("\r\n")...) // 确保行之间有换行
			}
		}
	}

	body := c.Request.Body()
	data = append(data, body...)

	fmt.Println(string(data))

	// 计算 SHA256 签名
	hash := sha256.New()
	hash.Write(data)
	signature := hex.EncodeToString(hash.Sum(nil))

	fmt.Println("signature:", signature)

	return signature
}
